{"CS120 - ORGA NIZACIJA RA\u010cUN ARA\nSloj digitalne logike -\nSekvencijalna kola\nLekcija 04\nCS120 - ORGANIZACIJA RA\u010cUNARA\nLekcija 04\nSLOJ DIGITALNE LOGIKE - SEKVENCIJALNA KOLA\nSloj digitalne logike - Sekvencijalna kola\nPoglavlje 1: Clock signal\nPoglavlje 2: Memorijska kola\nPoglavlje 3: Registri\nPoglavlje 4: RAM memorija\nPoglavlje 5: Stack i queue memorija\nPoglavlje 6: Pokazne Ve\u017ebe\nPoglavlje 7: Zadaci za samostalni rad\nPoglavlje 8: Doma\u0107i zadatak\nZaklju\u010dak\nCopyright\u00a92017\u2013UNIVERZITETMETROPOLITAN,Beograd.Svapravazadr\u017eana.Bezprethodnepismenedozvole\nod strane Univerziteta METROPOLITAN zabranjena je reprodukcija, transfer, distribucija ili memorisanje nekog\ndela ili \u010ditavih sadr\u017eaja ovog dokumenta., kopiranjem, snimanjem, elektronskim putem, skeniranjem ili na bilo\nkoji drugi na\u010din.\nCopyright \u00a9 2017 BELGRADE METROPOLITAN UNIVERSITY. All rights reserved. No part of this publication may\nbereproduced,storedinaretrievalsystemortransmittedinanyformorbyanymeans,electronic,mechanical,\nphotocopying, recording, scanning or otherwise, without the prior written permission of Belgrade Metropolitan\nUniversity.\nwww.metropolitan.ac.rs\nUvod\nUVOD\nUvod u lekciju #4\nU ovoj lekciji bilo je najpre bi\u0107e predstavljena razlika izme\u0111u kombinatornih kola iz prethodne\nlekcije, i sekvencijalnih kola, \u010diji se trenutni izlaz ra\u010duna ne samo u zavisnosti od trenutnih\nstanja na ulazu, ve\u0107 i od prethodnih izlaza.\nKao osnovno sekvencijalno kolo predstavljeno je SR-latch kolo, kao i D-flip-flip. Ova kola su\npogodna za skladi\u0161tenje informacija, pa se koriste za realizaciju memorijskih i registarskih\nelemenata.\nUpravo zbog toga bi\u0107e predstavljeni pomera\u010dki i broja\u010dki registri, kao i registri po modulu M.\nNakon toga, sledi objekat u\u010denja o samoj RAM memoriji, i njene strukture i podele na SRAM i\nDRAM.\nKona\u010dno bi\u0107e re\u010di o stack i queue memoriji, koje se uveliko koriste u razli\u010ditim realizacijama.\nNa ve\u017ebama pokazana su kola koder/dekoder, multiplekser/demultiplekser, broja\u010di, kao i\nmemorijski moduli.\n3\nPoglavlje 1\nClock signal\nODNOS IZME\u0110U KOMBINACIONIH I SEKVENCIJALNIH\nKOLA\nPona\u0161anje kombinacionog kola u potpunosti je specificirano\nistinitosnom tablicom ili skupom jedna\u010dina koje za svaku ulaznu\nkombinaciju daju odgovaraju\u0107u izlaznu kombinaciju.\nNa logi\u010dkom nivou digitalna kola se dele na dve velike klase: ona koja ne poseduju memoriju\nnazivamo kombinacionim kolima, dok su ona koja poseduju memoriju poznata pod imenom\nsekvencijalna kola. Pona\u0161anje kombinacionog kola u potpunosti je specificirano istinitosnom\ntablicom ili skupom jedna\u010dina koje za svaku ulaznu kombinaciju daju odgovaraju\u0107u izlaznu\nkombinaciju. Ova kola preslikavaju ulazne podatke u izlazne, tj. obavljaju izra\u010dunavanje u\njednom koraku. U praksi postoji neznatno ka\u0161njenje pre nego \u0161to izlazni signali promene\nsvoje stanje kao odziv na promene vrednosti signala na ulazu. Vreme odziva je obi\u010dno\nveoma kratko, naj\u010de\u0161\u0107e reda nanosekunde ili kra\u0107e, tako da se sa tog aspekta za odziv\nkombinacionih kola ka\u017ee da je trenutan.\nU idealnom slu\u010daju, kombinaciono kolo se defini\u0161e kao kolo \u010dije je vreme odziva nula. U": "\u0160ta su kombinaciona kola u digitalnoj logici?|Kombinaciona kola u digitalnoj logici su ona koja ne poseduju memoriju i \u010dije se pona\u0161anje potpuno specificira istinitosnom tablicom ili skupom jedna\u010dina.\n\nKako se obavlja izra\u010dunavanje u kombinacionim kolima?|Izra\u010dunavanje u kombinacionim kolima se obavlja u jednom koraku, preslikavaju\u0107i ulazne podatke u izlazne.\n\nKoja je karakteristika vremena odziva kombinacionih kola?|Vreme odziva kombinacionih kola je veoma kratko, reda nanosekunda ili kra\u0107e, pa se smatra da je odziv trenutan.\n\nStoje li kombinaciona kola u potpunosti definisana istinitosnom tablicom?|Da, kombinaciona kola su u potpunosti definisana istinitosnom tablicom ili skupom jedna\u010dina.\n\n\u0160ta su sekvencijalna kola u digitalnoj logici?|Sekvencijalna kola u digitalnoj logici su ona koja poseduju memoriju i \u010diji se trenutni izlaz ra\u010duna ne samo u zavisnosti od trenutnih stanja na ulazu, ve\u0107 i od prethodnih izlaza.\n\nKoji su primeri osnovnih sekvencijalnih kola?|Primeri osnovnih sekvencijalnih kola su SR-latch kolo i D-flip-flop.\n\nKako se koriste SR-latch kolo i D-flip-flop?|SR-latch kolo i D-flip-flop se koriste za skladi\u0161tenje informacija i realizaciju memorijskih i registarskih elemenata.\n\n\u0160ta su pomera\u010dki i broja\u010dki registri?|Pomera\u010dki i broja\u010dki registri su registri koji se koriste za realizaciju memorijskih i registarskih elemenata u digitalnoj logici.\n\n\u0160ta predstavljaju RAM, SRAM i DRAM?|RAM je tip memorije koja se sastoji od SRAM i DRAM. SRAM je br\u017ei tip RAM memorije sa stati\u010dkim \u010duvarima, dok je DRAM sporiji tip sa dinami\u010dkim \u010duvarima.\n\n\u0160ta su stack i queue memorija?|Stack i queue memorija su strukture podataka koje se uveliko koriste u razli\u010ditim realizacijama digitalne logike, omogu\u0107avaju\u0107i pristup podacima na jednom kraju (stack) ili na oba kraja (queue).\n\nKoji su primeri kola koja su pokazana na ve\u017ebama?|Na ve\u017ebama su pokazana kola kao \u0161to su koder/dekoder, multiplekser/demultiplekser, broja\u010di i memorijski moduli.", "op\u0161tem slu\u010daju, pona\u0161anje kombinacionog kola sa n ulaza koje koristi binarne signale se\nn\nmo\u017ee opisati istinitosnom tablicom koja ima 2 vrsta, po jednu za svaku mogu\u0107u ulaznu\nkombinaciju. Ilustracije radi, dvobitni sabira\u010d sa slike 1 a ima \u010detiri ulazna signala, a shodno\nprethodnom zaklju\u010dku, njegov rad se opisuje istinitosnom tablicom koja ima 16 vrsta (slika 1\nb).\nDa bi opisali rad sabira\u010da dva 16-bitna broja, kakve obi\u010dno sre\u0107emo u praksi, potrebna je\n32\nistinitosna tablica koja ima astronomskih 2 = 4,294,967,296 vrsta. Imaju\u0107i ovo u vidu,\nlogi\u010dno se name\u0107e potreba za efikasnijim opisom pona\u0161anja kombinacionih kola. Dva mo\u0107na\nsredstva koja se koriste za ovu namenu su Bulova algebra i jezici za opis hardvera.\n4\nPoglavlje 1 Clock signal\nSlika 1.1 (a) Dvobitni sabira\u010d i (b) njegova istinitosna tablica. [Izvor: Autor]\nPOJAM SEKVENCIJALNIH KOLA\nSekvencijalna kola moraju da pamte parcijalne rezultate izme\u0111u\nkoraka.\nNaime, digitalna kola koja izvr\u0161avaju specificirani zadatak obavljaju aktivnost kao sekvencu\nkoraka. Zbog toga za ova kola ka\u017eemo da su sekvencijalna. Ovakva kola sadr\u017ee memorijske\nelemente koji zadr\u017eavaju, tj. memori\u0161u vrednosti logi\u010dkih signala. Ka\u017ee se da ukupni sadr\u017eaj\nsvih memorijskih elemenata u jednom sekvencijalnom kolu predstavlja stanje tog kola. Kada\nse promene vrednosti ulaza, kolo ili ostane u istom (tj. teku\u0107em) stanju, ili promeni svoje\nstanje. Vremenom, kao posledica promena ulaza, kolo prolazi kroz sekvencu stanja. Kolo koja\nse pona\u0161aju na ovaj na\u010din zovu se sekvencijalna kola (en. sequential digital circuits).\nSekvencijalna kola moraju da pamte parcijalne rezultate izme\u0111u koraka. Pojmovi\nsekvencijalno kolo i kolo koje poseduje memoriju predstavljaju sinonime.\nPrednost sekvencijalnog rada je ta \u0161to je za izvr\u0161enje svakog koraka potrebno ugraditi\njednostavniji hardver, ali sa druge strane, treba da protekne znatno du\u017ei period dok se ne\ndobije kona\u010dan rezultat.\nTo zna\u010di da implementacija nekog zadataka pomo\u0107u kombinacione logike rezultira kra\u0107em\nvremenu generisanja rezultata u odnosu na implementaciju zasnovanu na sekvencijalnoj\nlogici, ali \u0107e zato obim hardvera biti ve\u0107i.\nDa bi ukazali na kompromis izme\u0111u obima ugra\u0111enog hardvera i brzine izra\u010dunavanja,\nanalizira\u0107emo primer sabiranja dva n-tobitna broja. Koriste\u0107i princip \"papira i olovke\"\nprimeni\u0107emovi\u0161ekora\u010dnimetodkodkogaseudatomtrenutkusabiraodgovaraju\u0107iparcifara,\npo\u010dev od cifre najmanje te\u017eine. Kada suma izra\u010dunata u teku\u0107em koraku prema\u0161i vrednost\nnajve\u0107e cifre \"prenosimo jedinicu\" ka narednom paru cifara. To zna\u010di da je za sabiranje n\ncifarapotrebnasekvencaodnkoraka,pri\u010demuseusvakomkorakucifraxiprvogbrojasabira\nsa po te\u017eini odgovaraju\u0107om cifrom yi drugog broja. Tako\u0111e, sumi se dodaje cifra prenosa\n(0 ili 1) koja je generisana u toku prethodnog koraka. Ilustracije radi, na slici 2 je prikazan\nsekvencijalnina\u010dinsabiranjabinarnihbrojeva.Kao\u0161tosevidisaslike2a,usvakomkorakuse\nsabiraju tri bita, xi, yi i cul, gde je cul bit prenosa iz prethodnog koraka, i odre\u0111uje bit sume zi i": "\u0160ta su sekvencijalna kola?|Sekvencijalna kola su digitalna kola koja izvr\u0161avaju specificirani zadatak kao sekvencu koraka i sadr\u017ee memorijske elemente koji zadr\u017eavaju vrednosti logi\u010dkih signala.\n\nKako se opisuje rad kombinacionog kola sa n ulaza koje koristi binarne signale?|Rad kombinacionog kola sa n ulaza koje koristi binarne signale se opisuje istinitosnom tablicom koja ima 2 vrste za svaku mogu\u0107u ulaznu kombinaciju.\n\nKoliko vrsta ima istinitosna tablica za dvobitni sabira\u010d?|Istinitosna tablica za dvobitni sabira\u010d ima 16 vrsta.\n\nKakav je problem sa opisivanjem pona\u0161anja kombinacionih kola sa mnogim ulazima?|Problem je da je potrebna astronomski velika istinitosna tablica, pa se tra\u017ee efikasniji na\u010dini opisivanja.\n\nKoja su dva sredstva za efikasniji opis pona\u0161anja kombinacionih kola?|Dva sredstva su Bulova algebra i jezici za opis hardvera.\n\n\u0160ta predstavlja stanje sekvencijalnog kola?|Stanje sekvencijalnog kola predstavlja ukupni sadr\u017eaj svih memorijskih elemenata u kolu.\n\n\u0160ta je prednost sekvencijalnog rada?|Prednost je da je za izvr\u0161enje svakog koraka potrebno ugraditi jednostavniji hardver, ali prolazak kroz sekvencu stanja traje du\u017ee vreme.\n\nKoja je razlika izme\u0111u kombinacione i sekvencijalne logike po pitanju brzine i obima hardvera?|Kombinaciona logika rezultira kra\u0107im vremenom generisanja rezultata, ali ve\u0107im obimom hardvera u odnosu na sekvencijalnu logiku.\n\nKoliko koraka je potrebno za sabiranje dva n-tobitna broja koriste\u0107i sekvencijalnu metodu?|Potrebno je n koraka za sabiranje dva n-tobitna broja koriste\u0107i sekvencijalnu metodu.\n\nObjasni pojam \"prenosi jedinicu\" u sabiranju binarnih brojeva.|\"Prenosi jedinicu\" zna\u010di da se ako suma izra\u010dunata u teku\u0107em koraku prema\u0161i vrednost najve\u0107e cifre, dodaje jedan na naredni par cifara.\n\n\u0160ta predstavlja bit prenosa u sabiranju binarnih brojeva?|Bit prenosa je cifra (0 ili 1) koja se generi\u0161e u toku prethodnog koraka i dodaje se sumi u teku\u0107em koraku.", "novibitprenosaciz.Naslici2b-dprikazanisukoracikodizra\u010dunavanja2+3=5(10+11=101).\n5\nPoglavlje 1 Clock signal\nSlika 1.2 Kori\u0161\u0107enje sekvencijalnog sabira\u010da za izra\u010dunavanje 2+3=5. [Izvor: Autor]\nSTRUKTURA I PODELA SEKVENCIJALNIH KOLA\nPrimarni izlazi se koriste za upravljanje radom okru\u017eenja kola dok se\nsekundarni izlazi koriste da specificiraju naredno stanje koje \u0107e se\npamtiti u memoriji.\nOdgovaraju\u0107a kombinacija sekundarnih ulaznih promenljivih u datom trenutku se naziva\ntrenutno stanje kola, dok su sekundarne promenljive poznate kao promenljive stanja.\nAko postoji m sekundarnih ulaznih promenljivih, tada sekvencijalno kolo mo\u017ee da se na\u0111e u\nm\njednom od 2 razli\u010ditih teku\u0107ih stanja. Izlazi kombinacionog dela kola se dele na dva skupa.\nPrimarni izlazi se koriste za upravljanje radom okru\u017eenja kola dok se sekundarni izlazi koriste\nda specificiraju naredno stanje koje \u0107e se pamtiti u memoriji. Broj sekundarnih izlaznih\npromenljivih zavisi od tipa memorije i kori\u0161\u0107enog memorijskog elementa.\nPodela sekvencijalnih kola\nSekvencijalna logi\u010dka kola se mogu podeliti na sinhrona (en. synchronous) i asinhrona (en.\nasynchronous).\nKod sinhronih kola interna stanja se menjaju u diskretnim vremenskim trenucima pod\nkontrolom impulsa za sinhronizaciju koga nazivamo taktni signal ili clock signal.\nTalasni oblik taktnog impulsa je obi\u010dno pravougaoni (slika 3 ).\n\"ON\" vreme se defini\u0161e kao period dok je signal u stanju 1, a\"OFF\" vreme kao period dok je\nsignal u stanju 0.\nSlika 1.3 Taktni signal. [Izvor: Autor]\nTAKTNI PERIOD\nTaktni period je vremenski interval izme\u0111u dve uzastopne promene\ntaktnog signala u istom smeru, tj. izme\u0111u dve rastu\u0107e ili izme\u0111u dve\nopadaju\u0107e ivice taktnog signala.\nPrelazi stanja kod sinhronih sekvencijalnih kola se obi\u010dno javljaju u trenutku kada postoje\nprelazi taktnih impulsa bilo sa 0 na 1 ili sa 1 na 0. Prelaz sa 0 na 1 se naziva pozitivna ivica\n6\nPoglavlje 1 Clock signal\nili usponska ivica, dok prelaz sa 1 na 0 odgovara negativnoj ili opadaju\u0107oj ivici taktnog\nsignala. Izme\u0111u sukcesivnih taktnih impulsa ne dolazi do promene informacije koja se \u010duva u\nmemoriji. Sinhrona sekvencijalna kola su tako\u0111e poznata i kao taktovana sekvencijalna kola.\nTaktni period je vremenski interval izme\u0111u dve uzastopne promene taktnog signala u istom\nsmeru, tj. izme\u0111u dve rastu\u0107e ili izme\u0111u dve opadaju\u0107e ivice taktnog signala (Slika 4 ).\nRecipro\u010dna vrednost taktnog perioda je taktna frekvencija. \u0160irina taktnog impulsa je\nvreme u toku koga je vrednost taktnog signala jednaka 1.\nFaktor popune taktnog signala je koli\u010dnik \u0161irine taktnog impulsa i taktnog perioda.\nKod asinhronih sekvencijalnih kola ne postoji spoljna sinhronizacija (taktni signal) tako da\nse prelazi kola sa jednog stanja u drugo iniciraju promenom primarnih ulaza. S obzirom da\nse promene stanja ne de\u0161avaju u specificiranim vremenskim trenucima, asinhrona kola rade\nsopstvenom brzinom.\nSlika 1.4 Karakteristike taktnog signala. [Izvor: Autor]\n7\nPoglavlje 2\nMemorijska kola\nBISTABILANA KOLA\nU digitalnoj tehnici kao memorijski elementi koriste se bistabilana kola": "\u0160ta se podrazumeva pod sekundarnim izlazima kod sekvencijalnih kola?|Sekundarni izlazi kod sekvencijalnih kola se koriste da specificiraju naredno stanje koje \u0107e se pamtiti u memoriji.\n\nKako se defini\u0161e trenutno stanje kola?|Trenutno stanje kola se defini\u0161e kao odgovaraju\u0107a kombinacija sekundarnih ulaznih promenljivih u datom trenutku.\n\nKoliko teku\u0107ih stanja mo\u017ee imati sekvencijalno kolo ako ima m sekundarnih ulaznih promenljivih?|Sekvencijalno kolo mo\u017ee da se na\u0111e u m jednom od 2 razli\u010ditih teku\u0107ih stanja ako ima m sekundarnih ulaznih promenljivih.\n\nKako se dele sekvencijalna logi\u010dka kola?|Sekvencijalna logi\u010dka kola se mogu podeliti na sinhrona i asinhrona.\n\n\u0160ta kontrolise promene internih stanja kod sinhronih kola?|Promene internih stanja kod sinhronih kola se kontrolise taktnim signalom ili clock signalom.\n\nKako se defini\u0161e taktni period?|Taktni period se defini\u0161e kao vremenski interval izme\u0111u dve uzastopne promene taktnog signala u istom smeru.\n\nKada se obi\u010dno javljaju prelazi stanja kod sinhronih sekvencijalnih kola?|Prelazi stanja kod sinhronih sekvencijalnih kola obi\u010dno se javljaju u trenutku kada postoje prelazi taktnih impulsa.\n\nKako se nazivaju prelazi taktnih impulsa sa 0 na 1?|Prelazi taktnih impulsa sa 0 na 1 se nazivaju pozitivnim ili usponskim ivicama.\n\n\u0160ta su bistabilna kola u digitalnoj tehnici?|U digitalnoj tehnici, bistabilna kola se koriste kao memorijski elementi.", "koja imaju dva stabilna stanja. Bistabilno kolo mo\u017ee da memori\u0161e\ninformaciju od jednog bita.\nElement koji zadr\u017eava, tj. pamti uspostavljeno stanje i po prestanku dejstva pobudnih signala\nkoji su ih prouzrokovali, naziva se memorijski element. Osnovna karakteristika memorijskih\nelemenata jeste postojanje stabilnih stanja u kojima mogu ostati neograni\u010deno vreme i koja\nse mogu menjati pod uticajem ulaznih signala.\nU digitalnoj tehnici kao memorijski elementi koriste se bistabilana kola koja imaju dva\nstabilna stanja. Bistabilno kolo mo\u017ee da memori\u0161e informaciju od jednog bita. Dva osnovna\ntipa bistabilnih kola su: le\u010d (en. latch) kola i flip\u2010flopovi (en. flip-flops).\nOva lekcija sadr\u017ei video materijal. Ukoliko \u017eelite da pogledate ovaj video morate da\notvorite LAMS lekciju.\nSR LATCH KOLO\nSR le\u010d je najjednostavniji memorijski element koji se koristi za\nprojektovanje digitalnih sistema\nSRle\u010d-SRle\u010djenajjednostavnijimemorijskielementkojisekoristizaprojektovanjedigitalnih\nsistema. SR le\u010d \u010dine dva unakrsno spregnuta NOR kola. Le\u010d je logi\u010dko kolo memorijskog tipa\nsadvaizlazakojisukomplementarnijedanuodnosunadrugi.Osnovnile\u010dsemo\u017eerealizovati\nunakrsnim povezivanjem dva NOR kola kako je to prikazano na slici 1 .\n8\nPoglavlje 2 Memorijska kola\nSlika 2.1 Le\u010d kolo sa NOR logi\u010dkim kolima. [Izvor: Autor]\nUlazi le\u010d kola se ozna\u010davaju sa Set i Reset. U toku normalnog rada izlazi Q i Q su uvek\nkomplementarni jedan u odnosu na drugi. Usvojimo da su oba ulaza na 0, izlaz Q na 1 a Q na\n0. Izlaz kola G1 bi\u0107e na 1, pa kako izlaz Q preko povratne grane pobu\u0111uje ulaz kola G2, izlaz\nG2 bi\u0107e 0. Kolo \u0107e zbog toga biti stabilno sa Q na 1 i Q na 0, kako smo i pretpostavili na\npo\u010detku.AkosesadaResetulazpostavina1,izlazG1\u0107esepromenitina0.ObaulazakolaG2\nbi\u0107e na 0 tako da \u0107e se njegov izlaz promeniti na 1. Le\u010d kolo \u0107e sada postati stabilno sa Q=0 i\nQ=1.\nPona\u0161anje le\u010d kola se mo\u017ee opisati istinitosnom tablicom datoj na slici 2 a. Ukr\u0161teni NOR je\npoznat kao SR (Set-Reset) le\u010d. Logi\u010dki simbol koji se koristi za predstavljanje SR le\u010da prikazan\nje na slici 2 b.\nSlika 2.2 (a) Istinitosna tablica i (b) logi\u010dki simbol SR le\u010da. [Izvor: Autor]\nAnaliziraju\u0107i istinitosnu tablicu sa slike 2a uo\u010davamo slede\u0107e. Ulazna kombinacija Set=1 i\nReset=1 nije dozvoljena, jer \u0107e oba izlaza Q i Q biti postavljena na 0, \u0161to je u kontradikciji sa\nuslovom da su Q i Q komplementarni.\nD LE\u010c\nLe\u010d ima samo dva ulaza: D (Data - podaci) i C (Control - upravlja\u010dki).\nJedan od na\u010dina da se elimini\u0161e ne\u017eeljeno nedefinisano stanje kod SR le\u010da je da se obezbedi\nda ulazi S i R ne budu nikada istovremeno jednaki 1. Ovo se izvodi kod D le\u010da kako je to\nprikazano na slici 3.\nLe\u010d ima samo dva ulaza: D (en. Data ) ulaz za podatke i C (en. Control) upravlja\u010dki ulaz.\n9\nPoglavlje 2 Memorijska kola\nSlika 2.3 D le\u010d. [Izvor: Autor]\nKomplement ulaza D dovodi se preko NI kola na ulaz\u23afS, a ulaz D preko invertora i NI kola na\nulaz\u23afR. Sve dok je upravlja\u010dki ulaz C=0 oba ulaza SR le\u010da su na visoko i kolo ne mo\u017ee da\npromeni svoje stanje nezavisno od vrednosti D. Ulaz D se uzorkuje (odmerava) kada je C=1.": "\u0160ta su memorijski elementi u digitalnoj tehnici?|Memorijski elementi u digitalnoj tehnici su elementi koji zadr\u017eavaju ili pamte uspostavljeno stanje i koji mogu da ostaju u stabilnim stanjima neograni\u010deno vreme, koja se mogu menjati pod uticajem ulaznih signala. Bistabilna kola su primer memorijskih elemenata koja imaju dva stabilna stanja.\n\nKoje su osnovne karakteristike memorijskih elemenata?|Osnovne karakteristike memorijskih elemenata su postojanje stabilnih stanja u kojima mogu ostati neograni\u010deno vreme i koja se mogu menjati pod uticajem ulaznih signala.\n\n\u0160ta je SR latch kolo?|SR latch kolo je najjednostavniji memorijski element koji se koristi za projektovanje digitalnih sistema. Sastoji se od dva unakrsno spregnuta NOR kola i ima dva izlaza koji su komplementarni jedan u odnosu na drugi.\n\nKako se elimini\u0161e ne\u017eeljeno nedefinisano stanje kod SR latch kola?|Ne\u017eeljeno nedefinisano stanje kod SR latch kola se elimini\u0161e tako \u0161to se obezbedi da ulazi S i R nikada nisu istovremeno jednaki 1, \u0161to se izvodi kod D latch kola.\n\n\u0160ta je D latch kolo?|D latch kolo je memorijski element koji ima samo dva ulaza: D (za podatke) i C (upravlja\u010dki). Komplement ulaza D se dovodi preko NI kola na ulaz S, a ulaz D preko invertora i NI kola na ulaz R. Kada je upravlja\u010dki ulaz C=0, latch ne mo\u017ee da promeni svoje stanje, dok se ulaz D uzorkuje kada je C=1.\n\nKoji su dva osnovna tipa bistabilnih kola?|Dva osnovna tipa bistabilnih kola su le\u010d (latch) kola i flip-flopovi.\n\n\u0160ta se podrazumeva pod \"stabilnim stanjima\" kod bistabilnih kola?|Stabilna stanja kod bistabilnih kola su stanja u kojima kolo mo\u017ee da ostane neograni\u010deno vreme bez promene stanja, dok se mogu menjati pod uticajem ulaznih signala.\n\nObjasni pojam \"ulazi Set i Reset\" kod SR le\u010d kola.|Ulazi Set i Reset kod SR le\u010d kola su ulazi koji slu\u017ee da se postavi ili resetuje stanje izlaza kola. Kada je ulaz Set postavljen na 1, izlaz Q se postavlja na 1, dok se izlaz Q' postavlja na 0. Kada je ulaz Reset postavljen na 1, izlaz Q se postavlja na 0, dok se izlaz Q' postavlja na 1.\n\nObjasni pojam \"ukr\u0161teni NOR\" kod SR le\u010d kola.|Ukr\u0161teni NOR kod SR le\u010d kola se odnosi na konfiguraciju dva NOR kola koja su povezana tako da izlaz jednog kola slu\u017ei kao ulaz drugom kolu. Ova konfiguracija omogu\u0107ava da SR le\u010d kolo memorije informaciju o jednom bitu.", "AkojeD=1,Qsepostavljana1,tj.zakoloka\u017eemodajeustanjuset.KadajeD=0,izlazQ=0i\nkolo je u stanju reset. Logi\u010dki simbol D le\u010da prikazan je na slici.\nSR i D le\u010devi su sigurno najjednostavniji i najjevtiniji tipovi memorijskih elemenata koji se\nkoriste kod logi\u010dkih kola. Oni se koriste kao elementi za memorisanje (pam\u0107enje) u kolima\ngde ne postoji direktna povratna veza sa izlaza bilo kog le\u010da preko spoljnih kola na ulaze\nle\u010deva (u okviru le\u010da postoje povratne veze). Ovaj zahtev je ispunjen kod strukture prikazane\nnaslici9.Kao\u0161tosevidisaslike9,ra\u010dunarprihvatapodatkesaulaznogure\u0111aja(tastatura),a\ngeneri\u0161e podatke na izlaznom ure\u0111aju (LED displej) koriste\u0107i le\u010deve. Svaka kolona le\u010deva ima\nzajedni\u010dku upravlja\u010dku liniju. Le\u010devi se koriste kao privremni memorijski elementi podataka\nna putu ulazni ure\u0111aj - ra\u010dunar ili ra\u010dunar - izlazni ure\u0111aj. Podatak se pamti u le\u010d (le\u010duje) i\nostaje tamo sve dok ne nai\u0111e novi podatak i zameni ga.\nFLIP-FLOPOVI\nFlip-flop se defini\u0161e kao bistabilno kolo koje koristi specijalni\nupravlja\u010dki signal C (mo\u017ee i nekoliko takvih signala) radi specificiranja\ntrenutaka u kojima se memorija odaziva na promene.\nKao\u0161tosmonapomenuli,zbogsvojetransparentnostiuradu(kadajeC=1,izlazQpratistanje\nna ulazu D) le\u010devi nisu pogodni za kori\u0161\u0107enje kod sekvencijalnih kola koja imaju povratnu\nstrukturu, kao \u0161to je ona prikazana na slici 4, tj. kada se izlaz le\u010da preko kombinacione logike\ndovodi na njegov ulaz. Naime, kada je C=1, izlazni signal (Q ili Q) se vra\u0107a preko povratne\ngranenaulazD.Ne\u017eeljenekombinacijepropagacionogka\u0161njenja(ka\u0161njenjasignalakrozkola)\nmogu da uzrokuju vi\u0161estruke promene, \u0161to rezultira novom neodre\u0111enom stanju le\u010da. Ovaj\nfenomen se naziva problem trke (en. race problem) i direktna je posledica transparentnosti\nle\u010da koja omogu\u0107ava da kada je C=1 (rad le\u010da dozvoljen) kroz le\u010d pro\u0111e neograni\u010den broj\npromena podataka.\n10\nPoglavlje 2 Memorijska kola\nDa bi ograni\u010dili memorijski element na samo jednu promenu stanja po koraku kada je le\u010du\ndozvoljen rad, neophodno je koristiti netransparentne memorijske elemente kao \u0161to su flip-\nflopovi.\nSlika 2.4 Tipi\u010dan na\u010din kori\u0161\u0107enja le\u010deva kod ra\u010dunarskih ulazno/izlaznih kola. [Izvor: Autor]\nFlip-flopovi\nPosmatrajmo bistabilno memorijsko kolo ME koje ima ulaz(e) X, izlaz podataka Q i\nupravlja\u010dki(e) ulaz(e) (takt) C. Broj ulaznih i upravlja\u010dkih linija, kao i na\u010din na koji se upravlja\nkolom, zavisi od tipa memorije. Kada je rad ME-u dozvoljen, prelaz iz jednog stabilnog stanja\nu drugo opisuje se relacijom na Slici 5.\nSlika 2.5 Relacija za ME kolo .[Izvor: Autor]\nIVI\u010cNO OKIDANI D FLIP-FLOP\nStanje master le\u010da koje treba kopirati je stanje koje je prisutno u\ntrenutku pojave pozitivne ivice taktnog impulsa.\nLogi\u010dki dijagram D tipa flip-flopa koji se okida na prednju ivicu prikazan je na slici 6 . Flip-\nflop \u010dine dve celine: master deo realizovan D le\u010dom i slave deo koji mo\u017ee biti SR ili D le\u010d.\nNa ulazu taktnog signala se dodaje invertor. S obzirom da je master le\u010d D le\u010d, flip-flop ima\nosobinu da se okida na ivicu, a ne na nivo kao \u0161to je to slu\u010daj sa master-slave. Kada je C=0,": "\u0160ta su osnovni memorijski elementi?|Osnovni memorijski elementi su SR i D le\u010devi.\n\nKada je D=1, \u0161ta se desava sa izlazom Q?|Kada je D=1, izlaz Q postavlja se na 1, tj. zaklju\u010dava se u to stanje.\n\n\u0160ta se de\u0161ava kada je D=0?|Kada je D=0, izlaz Q je 0 i kolo je u stanju reset.\n\n\u0160ta je logi\u010dki simbol D?|Logi\u010dki simbol D je prikazan na slici i predstavlja ulazni signal za D le\u010d.\n\nKada se koriste le\u010devi?|Le\u010devi se koriste kao elementi za memorisanje (pam\u0107enje) u kolima gde ne postoji direktna povratna veza sa izlaza bilo kog le\u010da preko spoljnih kola na ulaze le\u010deva.\n\nKako se koriste le\u010devi u ra\u010dunaru?|Ra\u010dunar prihvata podatke sa ulaznog ure\u0111aja (tastatura) i generi\u0161e podatke na izlaznom ure\u0111aju (LED displej) koriste\u0107i le\u010deve.\n\n\u0160ta su flip-flopovi?|Flip-flopovi su bistabilna kola koja koriste specijalni upravlja\u010dki signal radi specificiranja trenutaka u kojima se memorija odaziva na promene.\n\nZa\u0161to flip-flopovi nisu pogodni za kori\u0161\u0107enje kod sekvencijalnih kola sa povratnom strukturom?|Zbog transparentnosti urada, kada je C=1, izlazni signal se vra\u0107a preko povratne grane na ulaz D, \u0161to mo\u017ee uzrokovati vi\u0161estruke promene i problem trke.\n\nKako se ograni\u010dava memorijski element na samo jednu promenu stanja po koraku?|Koriste\u0107i netransparentne memorijske elemente kao \u0161to su flip-flopovi.\n\n\u0160ta je master le\u010da u D flip-flopu?|Master le\u010da u D flip-flopu je realizovana D le\u010dom i njeno stanje treba kopirati u slave le\u010d.\n\nKada se okida D flip-flop koji se okida na ivicu?|D flip-flop koji se okida na ivicu okida se kada se pojavi pozitivna ivica taktnog impulsa.", "rad master le\u010da je dozvoljen i transparentan, tj. njegov izlaz sledi stanje na D ulazu. Rad\nslave le\u010da je zabranjen i on odr\u017eava nepromenjeno stanje flip-flopa. Kada se javi pozitivna\nivica taktni ulaz se promeni na 1. Rad master le\u010da se zabranjuje, njegov izlaz zamrzava,\na slave le\u010du je dozvoljen rad tako da on kopira na svom izlazu stanje koje je prisutno\nna izlazu master le\u010da. Stanje master le\u010da koje treba kopirati je stanje koje je prisutno u\ntrenutku pojave pozitivne ivice taktnog impulsa. Zbog ovoga se pona\u0161anje flip-flopa opisuje\nkaookidanjenaivicu.KadajeC=1,radmasterle\u010dajezabranjenionnemo\u017eedasepromeni,\ntako da stanja oba le\u010da (i master-a i slave-a) ostaju nepromenjena.\n11\nPoglavlje 2 Memorijska kola\nSlika 2.6 D tip flip-flopa koji se okida na pozitivnu ivicu. [Izvor: Autor]\nKona\u010dno,kadaseCpromenisa1na0,radmaster-ajedozvoljeninjegovizlazpo\u010dinjedasledi\nvrednost na ulazu D. U toku prelaza sa 1 na 0 rad slave-a se zabranjuje tako da bilo kakva\npromenanamaster-unemaefektanaizlazslave-a.Zbogtoga,vrednostkojajememorisanau\nslave-u ostaje nepromenjena u toku ove promene. Kao \u0161to smo napomenuli, ivi\u010dno okidani D\nflip-flop(ilidelayflip-flop)semo\u017eerealizovatiipomo\u0107udvaDle\u010daijednoginvertora(slika7).\nOvo re\u0161enje se uglavnom koristi kod logi\u010dkih kola koja pripadaju CMOS tehnologiji, kao \u0161to je\n74HC74. Flip-flopovi se obi\u010dno projektuju sa jednim ili dva dodatna upravlja\u010dka ulaza koji su\nnamenjeni za inicijalizaciju po\u010detnog stanja flip-flopa. Upravlja\u010dki signal koji dovodi flip-flop u\nstanje Q=0 se naziva clear (CLR\u2019) ulaz, a onaj koji postavlja flip-flop u stanje Q=1 se naziva\npreset (PR\u2019) ulaz. Uticaj PR\u2019 i CLR\u2019 upravlja\u010dkih signala je nezavisan od taktnog signala pa\nzbogtogazaPR\u2019iCLR\u2019ka\u017eemodasukaoulaziasinhroni.Nasuprotnjima,Djesinhroniulazu\nodnosu na taktni signal.\nSlika 2.7 D flip-flop koji se okida ivi\u010dno. [Izvor: Autor]\n\u010cETRI TIPA FLIP\u2010FLOPOVA SA ASINHRONIM\nULAZIMA\n\u010cetri tipa flip\u2010flopova sa asinhronim ulazima su: (a) SR flip\u2010flop; (b) JK\nflip\u2010flop; (c) D flip\u2010flop; (d) T flip\u2010flop.\nSvaki flip\u2010flop je obi\u010dno dostupan u dve varijante: sa ili bez ulaza za direktno (tj. asinhrono)\npostavljanje, koji se koriste za setovanje (ulaz SET) i resetovanje (ulaz CLR) flip\u2010flopa\nnezavisno od takta i ostalih ulaza. Ovi ulazi se koriste za postavljanje flip\u2010flopa u poznato\npo\u010detno (tj. inicijalno) stanje. Na primer, stanje u koje \u0107e se flip\u2010flop spontano postaviti nakon\n\u0161to je uklju\u010deno napajanje ne mo\u017ee se predvideti. Zato je neophodno da se pre po\u010detka\nnormalnog, sinhronog rada, flip\u2010flop postavi u odgovaraju\u0107e po\u010detno stanje posredstvom\nasinhronih ulaza. Ulazi SET i CLR se zovu asinhroni zato \u0161to ne zavise od taktnog signala i\nzbog toga imaju prioritet nad svim ostalim sinhronim ulazima.\nDrugim re\u010dima, dok je asinhroni ulaz aktivan, vrednosti ostalih ulaza flip\u2010flopa se ignori\u0161u.\n12\nPoglavlje 2 Memorijska kola\nDejstvo asinhronog ulaza po\u010dinje onog trenutka kada se na ulaz dovede aktivan naponski\nnivo (0 ili 1), i traje sve dok se ulaz ne deaktivira. Ako flip\u2010flop poseduje oba asinhrona ulaza,": "\u0160ta je rad master le\u010da kada je C=1?|Rad master le\u010da je zabranjen kada je C=1, tako da stanja oba le\u010da (i master-a i slave-a) ostaju nepromenjena.\n\n\u0160ta je ivi\u010dno okidani D flip-flop?|Ivi\u010dno okidani D flip-flop je tip flip-flopa koga karakteri\u0161e promena stanja na pozitivnoj ivici taktnog impulsa.\n\n\u0160ta su uticaji PR\u2019 i CLR\u2019 upravlja\u010dkih signala?|Uticaji PR\u2019 i CLR\u2019 upravlja\u010dkih signala su nezavisni od taktnog signala i nazivaju se asinhroni ulazi. Oni se koriste za inicijalizaciju po\u010detnog stanja flip-flopa.\n\nKoje su \u010detiri vrste flip-flopova sa asinhronim ulazima?|\u010cetiri vrste flip-flopova sa asinhronim ulazima su: (a) SR flip-flop; (b) JK flip-flop; (c) D flip-flop; (d) T flip-flop.\n\n\u0160ta se de\u0161ava kada flip-flop poseduje oba asinhrona ulaza?|Ako flip-flop poseduje oba asinhrona ulaza, prioritet imaju oni, a vrednosti ostalih ulaza flip-flopa se ignori\u0161u dok je asinhroni ulaz aktivan.\n\nObjasni pojam asinhroni ulazi u kontekstu flip-flopova.|Asinhroni ulazi u kontekstu flip-flopova su ulazi koji ne zavise od taktnog signala i imaju prioritet nad svim ostalim sinhronim ulazima. Oni se koriste za postavljanje flip-flopa u poznato po\u010detno stanje i nezavisno od ostalih ulaza.\n\n\u0160ta se de\u0161ava sa stanjem slave le\u010da kada se javi pozitivna ivica taktnog ulaza?|Kada se javi pozitivna ivica taktnog ulaza, stanje slave le\u010da se promeni tako da kopira stanje koje je prisutno na izlazu master le\u010da u trenutku pojave pozitivne ivice taktnog impulsa.\n\nObjasni pojam ivi\u010dno okidanje u kontekstu flip-flopova.|Ivi\u010dno okidanje u kontekstu flip-flopova je promena stanja flip-flopa na pozitivnoj ili negativnoj ivici taktnog signala. Ovo omogu\u0107ava da se stanje flip-flopa menja samo u odre\u0111enim trenucima, \u0161to je va\u017eno za sinhronizaciju sa ostalim delovima digitalnog kolaa.\n\nKada se koriste asinhroni ulazi SET i CLR?|Asinhroni ulazi SET i CLR se koriste za postavljanje flip-flopa u poznato po\u010detno stanje pre po\u010detka normalnog sinhronog rada. Oni se koriste kada je neophodno da se flip-flop postavi u odre\u0111eno stanje nezavisno od taktnog signala i ostalih ulaza.", "SET i CLR, njihovo istovremeno dejstvo nije dozvoljeno. Na Sl. 24 su prikazani grafi\u010dki simboli\nflip\u2010flopova sa ulazima za direktno postavljanje sa aktivnim niskom naponskim nivoom, \u0161to\nje nazna\u010deno kru\u017ei\u0107ima na odgovaraju\u0107im ulazima. Kod asinhronih ulaza sa aktivnim visokim\nnaponskim nivoom, kru\u017ei\u0107i bi bili izostavljeni.\nSlika 2.8 \u010cetri tipa flip\u2010flopova sa asinhronim ulazima: (a) SR flip\u2010flop; (b) JK flip\u2010flop; (c) D flip\u2010flop; (d)\nT flip\u2010flop [Izvor: Autor]\n13\nPoglavlje 3\nRegistri\nREGISTAR KAO MEMORIJSKA KOMPONENTA\nSinhronizovano sa aktivnom (rastu\u0107om ili opadaju\u0107om) ivicom taktnog\nsignala, u svaki flip\u2010flop upisuje se jedan bit informacije.\nRegistar (en. register) je memorijska komponenta koja se sastoji od n flip\u2010flopova sa\nzajedni\u010dkim taktnim signalom.\nSinhronizovano sa aktivnom (rastu\u0107om ili opadaju\u0107om) ivicom taktnog signala, u svaki\nflip\u2010flop upisuje se jedan bit informacije. U svom osnovnom obliku, pored taktnog signala,\nregistar ima n ulaza i n izlaza. Na Sl. 1 prikazan je primer 4\u2010bitnog registra. Grafi\u010dki simbol\n4\u2010bitnogregistradatjenaSl.1(a),dokjenaSl.1(b)prikazananjegovaunutra\u0161njastruktura,\nkoju \u010dine \u010detiri paralelno povezana D flip\u2010flopa.\nSlika 3.1 4\u2010bitni registar: (a) grafi\u010dki simbol; (b) unutra\u0161nja struktura [Izvor: Autor]\nFunkcionalnost osnovne varijante registra, prikazane na Sl. 1, mo\u017ee se pro\u0161iriti dodavanjem\nrazli\u010ditih upravlja\u010dkih signala.\nNa primer, ako registar treba biti resetovan ili setovan nezavisno od taktnog signala, bilo\npri uklju\u010denju napajanja, bilo pri pojavi nekih specifi\u010dnih doga\u0111aja, mogu se dodati signali\nza asinhrono resetovanje i setovanje. Takvo jedno pro\u0161irenje se posti\u017ee zamenom\njednostavnih flip\u2010flopova sa Sl. 1(b), flip\u2010flopovima sa ulazima za direktno postavljanje, kao\n\u0161to je prikazano na Sl. 2(b).\nKao \u0161to se vidi na Sl. 2 , kratkotrajnim aktiviranjem signala Rst sadr\u017eaj registra se bri\u0161e ili\nresetuje, tj. postavlja na \u201csve nule\u201d. Sli\u010dno, registar se setuje, tj. njegov sadr\u017eaj postaviti na\n\u201csve jedinice\u201d, kratkotrajnim aktiviranjem signala Set. (S obzirom da je aktivni nivo signala\nRst i Set nizak, aktiviranje jednog od ova dva signala zna\u010di postavljanje 0 na odgovaraju\u0107i\nulaz). Ulazi Rst i Set su nezavisni od taktnog signala i imaju prioritet nad njim. To zna\u010di da\nako je u trenutku pojave rastu\u0107e ivice taktnog signala, Set ili Rst jednak 0, ulaz I se ignori\u0161e,\na registar se setuje, odnosno resetuje.\n14\nPoglavlje 3 Registri\nSlika 3.2 4\u2010bitni registar sa asinhronim resetovanjem i setovanjem: (a) grafi\u010dki simbol; (b)\nunutra\u0161njastruktura. [Izvor: Autor]\nREGISTAR SA DOZVOLOM\nMultiplekseri se mogu iskoristiti i za pomeranje podatka zapam\u0107enog u\nregistru. Ovakav tip registra se zove pomera\u010dki registar.\nKod obe varijante registra, prikazane na Sl. 1 i Sl. 2, novi podatak se automatski upisuje u\nregistar sa svakom rastu\u0107om ivicom takta. Me\u0111utim, kod mnogih digitalnih sistema, podatak\nkoji je upisan u registar ostaje u registru nekoliko taktnih ciklusa pre nego \u0161to se upi\u0161e\nnovi podatak. Iz tog razloga, mogu\u0107nost kontrole upisa predstavlja korisnu funkciju registra.": "\u0160ta su SET i CLR?|SET i CLR su ulazi za direktno postavljanje stanja flip-flopova sa aktivnim niskim naponskim nivoom.\n\n\u0160ta ozna\u010davaju kru\u017ei\u0107i na grafi\u010dkim simbolima flip-flopova?|Kru\u017ei\u0107i ozna\u010davaju ulaze za direktno postavljanje sa aktivnim niskim naponskim nivoom.\n\n\u0160ta je registar?|Registar je memorijska komponenta koja se sastoji od n flip-flopova sa zajedni\u010dkim taktnim signalom.\n\n\u0160ta se understaude pod sinhronizovano sa aktivnom ivicom taktnog signala?|Understaude se da u svaki flip-flop upisuje se jedan bit informacije u trenutku aktivne ivice taktnog signala.\n\nKako se mo\u017ee pro\u0161iriti funkcionalnost osnovne varijante registra?|Funkcionalnost osnovne varijante registra se mo\u017ee pro\u0161iriti dodavanjem razli\u010ditih upravlja\u010dkih signala, poput signala za asinhrono resetovanje i setovanje.\n\n\u0160ta se de\u0161ava kada je aktiviran signal Rst ili Set?|Kada je aktiviran signal Rst, sadr\u017eaj registra se bri\u0161e ili resetuje na \"sve nule\". Kada je aktiviran signal Set, sadr\u017eaj registra se postavlja na \"sve jedinice\".\n\n\u0160ta je pomera\u010dki registar?|Pomera\u010dki registar je tip registra koji se koristi za pomeranje podataka, a izra\u0111uje se koriste\u0107i multiplekser.\n\n\u0160ta je prednost kontrole upisa u registar?|Kontrola upisa predstavlja korisnu funkciju registra jer omogu\u0107ava da podatak koji je upisan u registar ostane u registru nekoliko taktnih ciklusa pre nego \u0161to se upi\u0161e novi podatak.\n\n\u0160ta su ulazi I, Rst i Set?|Ulazi I, Rst i Set su ulazi registra. Ulaz I je ulaz za podatke, dok su Rst i Set ulazi za resetovanje i setovanje registra.", "Kontrola upisa se posti\u017ee kori\u0161\u0107enjem upravlja\u010dkog signala Enable (En) koji kada je 1\ndozvoljava upis novog podatka u registar.\nOvakav tip registra se zove registar sa dozvolom.\nNa slici 3 su prikazani grafi\u010dki simbol, tabela operacija i unutra\u0161nja struktura registar sa\ndozvolom. Registar sadr\u017ei multipleksere 2\u2010u\u20101 koji omogu\u0107avaju izbor izme\u0111u ulaznog\npodatka i podatka koje je ve\u0107 u registru.\nSignalEnupravljamultiplekserimanatakavna\u010dindakadajeEn=1,uregistarseupisujenovi,\ntj. ulazni podatak. U suprotnom, ako je En=0, podatak koji je prethodno upisan u registar se\nvra\u0107a na ulaze flip\u2010flopova i sa slede\u0107om rastu\u0107om ivicom takta ponovo upisuje u registar \u2010\ndakle, sadr\u017eaj registra ostaje neizmenjen.\nSlika 3.3 Registar sa dozvolom: (a) grafi\u010dki simbol; (b) tabela operacija; (c) unutra\u0161nja struktura.[Izvor:\nAutor]\n15\nPoglavlje 3 Registri\nPOMERA\u010cKI REGISTAR\nPomera\u010dki registaa omogu\u0107ava pomeranje upisanog sadr\u017eaja za jednu\nbit\u2010poziciju.\nPomera\u010dki registar\nNa primeru registra sa dozvolom pokazano je kako se postavljanjem multipleksera ispred\nulaza flipflopova mo\u017ee kontrolisati upis u registar. Slede\u0107i sli\u010dnu logiku, multiplekseri se\nmogu iskoristiti i za pomeranje podatka zapam\u0107enog u registru. Ovakav tip registra se\nzove pomera\u010dki registar i omogu\u0107ava pomeranje upisanog sadr\u017eaja za jednu bit\u2010poziciju. U\nosnovnoj varijanti, pomera\u010dki registar poseduje upravlja\u010dki signal Shift koji kada je jednak 1\npostavlja registar u re\u017eim pomeranja.\nNa slici 4 je prikazan primer 4\u2010bitnog pomera\u010dkog registra.\nSlika 3.4 \u010cetvorobitni pomera\u010dki registar sa serijskim ulazom i paralelnim izlazom: (a) grafi\u010dki simbol;\n(b) tabela operacija; (c) unutra\u0161nja struktura. [Izvor: Autor]\n16\nPoglavlje 4\nRAM memorija\nRAM (RANDOM\u2010ACCESS MEMORY, ILI MEMORIJA SA\nPROIZVOLJNIM PRISTUPOM)\nRAM memoriju \u010dine: polje memorijskih \u0107elija, adresni dekoder i ulazno/\nizlazni (U/I) baferi.\nU prethodnom odeljku su registri, koji predstavljaju brzu memoriju malog kapaciteta pogodnu\nza privremeno \u010duvanje vrednosti promenljivih u toku nekog slo\u017eenijeg izra\u010dunavanja.\nS druge strane, memorija sa proizvoljnim pristupom (en. Random\u2010access memory, RAM)\npredstavlja sporiju memoriju daleko ve\u0107eg kapaciteta pogodnu za dugotrajno sme\u0161tanje\nprograma i podataka koji se koriste tokom izra\u010dunavanja. Sli\u010dno registarskom fajlu, RAM je\nn\norganizovan u vidu polja od 2 vrsta sa m bita u svakoj vrsti.\nU op\u0161tem slu\u010daju, n se kre\u0107e izme\u0111u 16 i 32, dok je m, obi\u010dno 1, 4, 8, 16 ili 32. Tipi\u010dna\nn\nmemorija nalikuje onoj sa Sl. 1 (a). S obzirom da memorija ima 2 vrsta, za jednozna\u010dnu\nidentifikaciju svake vrste potrebno je n adresnih linija.\nPored adresnih linija, memorija poseduje ulazni signal Chip_select (CS) koji se koristi prilikom\nkonstrukcije ve\u0107ih memorija na bazi memorijskih \u010dipova manjeg kapaciteta. Uvek kada je\nCS=1, memorija normalno funkcioni\u0161e.\nSlika 4.1 RAM memorija: (a) memorijske adrese i sadr\u017eaj; (b) grafi\u010dki simboli. [Izvor: Autor]\nPREDSTAVLJANJE RAM MEMORIJE\nRAM memorija mo\u017ee se simboli\u010dki predstaviti kao struktura koju \u010dine:": "Iz teksta kreirane Anki kartice na srpskom jeziku glase:\n\n\u0160ta je kontrola upisa u registar?|Kontrola upisa u registar se posti\u017ee kori\u0161\u0107enjem upravlja\u010dkog signala Enable (En) koji kada je 1 dozvoljava upis novog podatka u registar.\n\n\u0160ta je registar sa dozvolom?|Registar sa dozvolom je tip registra koji koristi upravlja\u010dki signal Enable za dozvoljavanje upisa novog podatka u registar.\n\nKako multiplekseri omogu\u0107avaju kontrolu upisa u registar sa dozvolom?|Multiplekseri omogu\u0107avaju izbor izme\u0111u ulaznog podatka i podatka koji je ve\u0107 u registru, tako da kada je Enable signala jednak 1, ulazni podatak upisuje se u registar.\n\n\u0160ta je pomera\u010dki registar?|Pomera\u010dki registar je tip registra koji omogu\u0107ava pomeranje upisanog sadr\u017eaja za jednu bit-poziciju.\n\nKako se pomeranje sadr\u017eaja kontrolise u pomera\u010dkom registru?|Pomeranje sadr\u017eaja u pomera\u010dkom registru kontrolise se upravlja\u010dkim signalom Shift. Kada je Shift jednak 1, registar se postavlja u re\u017eim pomeranja.\n\n\u0160ta je RAM memorija?|RAM memorija (Random-Access Memory) je sporija memorija ve\u0107eg kapaciteta pogodna za dugotrajno sme\u0161tanje programa i podataka koji se koriste tokom izra\u010dunavanja.\n\nKako je RAM memorija organizovana?|RAM memorija je organizovana u vidu polja od 2 vrste sa m bita u svakoj vrsti, sa n adresnih linija za jednozna\u010dnu identifikaciju svake vrste.\n\n\u0160ta je ulazni signal Chip_select u RAM memoriji?|Ulazni signal Chip_select u RAM memoriji se koristi prilikom konstrukcije ve\u0107ih memorija na bazi memorijskih \u010dipova manjeg kapaciteta, i kada je CS=1, memorija normalno funkcioni\u0161e.", "taktovani D le\u010d, jedno AND kolo i izlazni trostati\u010dki bafer.\n17\nPoglavlje 4 RAM memorija\nMe\u0111utim, kada je CS=0, pristup memoriji radi \u010ditanja ili upisa je onemogu\u0107en. Tako\u0111e,\nmemorijski \u010dip ima jo\u0161 jednu upravlja\u010dku liniju, Read/write_select (RWS), koja bira jednu od\ndve memorijske operacije: upis ili \u010ditanje. Kada je RWS=0, memorija \u010dita svoj sadr\u017eaj sa\nlokacijeodre\u0111eneadresinimlinijamakojipostajedostupannaizlaznomportu.Sdrugestrane,\nkada je RWS=1, memorija upisuje sadr\u017eaj prisutan na ulaznom portu u lokaciju odre\u0111enu\nadresnim linijama. RAM, tako\u0111e, ima m\u2010bitni ulazni i m\u2010bitni izlazni port. Za male vrednosti m\n(npr. 1 ili 4), memorija mo\u017ee imati razdvojene ulazne i izlazne portove.\nMe\u0111utim, da bi se smanjio broj pinova na memorijskom \u010dipu, ulazni i izlazni port su obi\u010dno\nobjedinjeni u jedinstven ulazno/izlazni port. U op\u0161tem slu\u010daju, broj pinova na \u010dipu odre\u0111uje\npovr\u0161nu koju \u010dip zauzima na \u0161tampanoj plo\u010di. Grafi\u010dki simboli oba tipa pakovanja memorije\nsu prikazana na Sl. 1 (b).\nRAM memoriju \u010dine: polje memorijskih \u0107elija, adresni dekoder i ulazno/izlazni (U/I) baferi.\nKao \u0161to je prikazano na Sl. 2 (a), memorijska \u0107elija (memory cell \u2013 MC) mo\u017ee se simboli\u010dki\npredstaviti kao struktura koju \u010dine: taktovani D le\u010d, jedno AND kolo i izlazni trostati\u010dki bafer.\nSlika 4.2 Organizacija RAM memorije: (a) memorijska \u0107elija; (b) unutra\u0161nja struktura. [Izvor: Autor]\nSTATI\u010cKI I DINAMI\u010cKI RAM\nSRAM memorija \u010duva upisani sadr\u017eaj sve dok se ne upi\u0161e novi ili\nisklju\u010di napajanje.\nKada je signal Row_select jednak 1, bit informacije zapam\u0107en u le\u010du se prenosi na izlaz\nOutput. Ako je pri tom i signal Write_enable jednak 1, vrednost sa ulaza Input se pamti u\nle\u010du. Uo\u010dimo da signal Write_enable slu\u017ei kao signal takta za le\u010d. Iako je memorijska \u0107elija\npredstavljena uz pomo\u0107 le\u010da i dva gejta, treba razumeti da se ona realizuje sa daleko manjim\nbrojem tranzistora u odnosu na registarsku \u0107eliju.\nShodno na\u010dinu implementacije, memorije se dele na stati\u010dki i dinami\u010dki RAM. Stati\u010dki RAM\n(SRAM) se konstrui\u0161e na bazi memorijskih \u0107elija sa \u010detiri do \u0161est tranzistora kod kojih se\nle\u010d realizuje uz pomo\u0107 unakrsno spregnutih invertora (2 tranzistora), dok se za AND kolo i\n18\nPoglavlje 4 RAM memorija\ntrostati\u010dki bafer koristi jo\u0161 po jedan tranzistor. SRAM memorija \u010duva upisani sadr\u017eaj sve dok\nse ne upi\u0161e novi ili isklju\u010di napajanje. S druge strane, kod dinami\u010dke RAM memorije (DRAM),\nza realizaciju memorijske \u0107elije koristi se samo jedan tranzistor. Takva memorijska \u0107elija gubi\nupisani sadr\u017eaj pri svakom \u010ditanju, te zbog toga nakon svakog \u010ditanje mora da sledi upis\nupravo pro\u010ditanog podataka.\nTako\u0111e, kao posledica nesavr\u0161enog postupka fabrikacije, sadr\u017eaj memorijske \u0107elije se\nspontanoinepovratnogubinakonizvesnogvremenapoupisu.Dabimemorijska\u0107elijauspela\nda sa\u010duva svoj sadr\u017eaj, neophodno joj je pristupati sa nekom odre\u0111enom frekvencijom, ili\nperiodi\u010dno obnavljati (ili osve\u017eavati) upisani sadr\u017eaj.\nU toku osve\u017eavanja, operacije \u010ditanja i upisa se suspenduju, \u0161to mo\u017ee u nekim slu\u010dajevima\nbiti problem. Me\u0111utim, bez obzira na sve to, zahvaljuju\u0107i superiornim karakteristikama u": "\u0160ta su dva tipa RAM memorije?|Stati\u010dki RAM (SRAM) i dinami\u010dki RAM (DRAM)\n\nKako se spre\u010dava pristup memoriji za \u010ditanje ili upis kada je CS=0?|Pristup memoriji za \u010ditanje ili upis se onemogu\u0107ava kada je CS=0.\n\n\u0160ta bira memorijska operaciju, upis ili \u010ditanje, u RAM memoriji?|Upravlja\u010dka linija Read/write_select (RWS) bira memorijsku operaciju, upis ili \u010ditanje.\n\nKada memorija \u010dita svoj sadr\u017eaj?|Memorija \u010dita svoj sadr\u017eaj sa lokacije odre\u0111ene adresnim linijama kada je RWS=0.\n\nKada memorija upisuje sadr\u017eaj?|Memorija upisuje sadr\u017eaj prisutan na ulaznom portu u lokaciju odre\u0111enu adresnim linijama kada je RWS=1.\n\nKako se smanjuje broj pinova na memorijskom \u010dipu?|Broj pinova na memorijskom \u010dipu se smanjuje objedinjavanjem ulaznog i izlaznog porta u jedinstven ulazno/izlazni port.\n\n\u0160ta \u010dine stati\u010dki RAM (SRAM) memorije?|Stati\u010dki RAM (SRAM) memorije \u010dine: polje memorijskih \u0107elija, adresni dekoder i ulazno/izlazni (U/I) baferi.\n\nKako se realizuje memorijska \u0107elija u SRAM memoriji?|Memorijska \u0107elija u SRAM memoriji se realizuje sa daleko manjim brojem tranzistora u odnosu na registarsku \u0107eliju.\n\nKada gubi upisani sadr\u017eaj dinami\u010dka RAM memorija (DRAM)?|Dinami\u010dka RAM memorija (DRAM) gubi upisani sadr\u017eaj pri svakom \u010ditanju.\n\nZa\u0161to je neophodno periodi\u010dno obnavljati upisani sadr\u017eaj u DRAM memoriji?|Neophodno je periodi\u010dno obnavljati upisani sadr\u017eaj u DRAM memoriji zbog spontanog neprevratnog gubitka u vremenu pri pisanju.\n\n\u0160ta se desava tokom osve\u017eavanja DRAM memorije?|Tokom osve\u017eavanja DRAM memorije, operacije \u010ditanja i upisa se suspenduju.", "pogledu gustine pakovanja i cene, DRAM memorije se veoma \u010desto koriste za projektovanje\nnajrazli\u010ditijih elektronskih ure\u0111aja.\nS druge strane, SRAM memorije su, iako skuplje, br\u017ee i zbog toga pogodne za primene\nkoje ne zahtevaju veliku koli\u010dinu memorije, kao i tamo gde brzi pristup memoriji predstavlja\nimperativni zahtev. SRAM i DRAM memorije su tzv. nepostojane memorije (en. volatile\nmemories), s obzirom da se njihov sadr\u017eaj gubi kada se isklju\u010di napajanje. S druge strane,\nROM i PROM memorije su tzv. postojane memorije, s obzirom da zadr\u017eavaju sadr\u017eaj \u010dak i\nnakon isklju\u010denja napajanja.\nNa Sl. 2(b) je prikazan primer memorije 4x4 koja ima 16 memorijskih \u0107elija. Radi pristupa\nsvakoj memorijskoj \u0107eliji, adresni dekoder dekodira adresu i selektuje jednu od vrsta. Pri\ntome, ako su oba signala RWS i CS jednaka 1, u selektovanu vrstu upisuje se novi sadr\u017eaj.\nIako su sadr\u017eaji svih \u0107elija prisutni na izlaznim linijama, izlazni tro\u2010stati\u010dki baferi su zako\u010deni\n\u0161to omogu\u0107ava novom podatku koji je prisutan na ulazno/izlaznom portu da bude upisan.\nMe\u0111utim, ako je RWS=0 i CS=1, podatak iz selektovane vrste se kroz tro\u2010stati\u010dke bafere\nprosle\u0111uje na U/I port.\nPRO\u0160IRENJE MEMORIJSKE RE\u010cI\nPro\u0161irenje memorijske re\u010di, tj. formiranje memorije sa ve\u0107im m, posti\u017ee\nse paralelnim vezivanjem nekoliko memorijskih \u010dipova.\nn\nKao \u0161to je ve\u0107 re\u010deno, memorijske komponente se po pravilu proizvode u veli\u010dinama 2 xm,\ngde n i m mogu da variraju unutar \u0161irokog opsega brojeva. Me\u0111utim, uop\u0161teno govore\u0107i,\nn\nza konkretnu implementacionu tehnologiju i godinu proizvodnje, proizvod 2 xm, tj. kapacitet\nmemorije, jekonstanta. Imaju\u0107i touvidu, uslu\u010dajevima kadamemorija potrebnogkapaciteta\nnije dostupna u vidu monolitnog \u010dipa, ona se mora konstruisati pomo\u0107u memorijskih \u010dipova\nmanjeg kapaciteta koji su dostupni na tr\u017ei\u0161tu u vremenu projektovanja. U nastavku ovog\nodeljka bi\u0107e opisano kao se realizuju \u201c\u0161ire\u201d i ve\u0107e memorije, tj. kao posti\u0107i da m i n budu ve\u0107i\nod kapaciteta koji je raspolo\u017eiv na jednom memorijskom \u010dipu.\nPro\u0161irenje memorijske re\u010di, tj. formiranje memorije sa ve\u0107im m, posti\u017ee se paralelnim\nvezivanjem nekoliko memorijskih \u010dipova. Na Sl. 3 je prikazan primer konstrukcije RAM\n19\nPoglavlje 4 RAM memorija\nmemorije kapaciteta 16Kx32 kori\u0161\u0107enjem RAM \u010dipova kapaciteta 16Kx8 (K je oznaka za kilo,\ntj. 210).\nSlika 4.3 16Kx32 RAM, realizovan pomo\u0107u 16Kx8 RAM. [Izvor: Autor]\nKao \u0161to se vidi, kod ovog re\u0161enja, adresne linije, kao i linije CS i RWS, povezane su sa svim\nmemorijskim \u010dipovima. Uo\u010dimo da su ulazna i izlazna magistrala podeljene na \u010detiri grupe od\npo 8 linija, pri \u010demu su linije iz iste grupe povezane sa jednom memorijom. Kori\u0161\u0107enjem ovog\npostupka u mogu\u0107nosti smo da konstrui\u0161emo memoriju bilo koje \u0161irine.\nDa bi smo realizovali ve\u0107u memoriju, tj. memoriju sa ve\u0107im brojem memorijskih lokacija,\nneophodno je povezati nekoliko memorijskih \u010dipova na red, tako da svaki \u010dip sadr\u017ei jedan\ndeo od ukupnog broja memorijskih re\u010di. Princip re\u0161enja prikazan je na Sl. 4 , gde je pomo\u0107u\n\u010detiri RAM \u010dipa kapaciteta 16Kx8 realizovana RAM memorija kapaciteta 64Kx8. Uo\u010dimo da u": "\u0160ta su DRAM memorije?|DRAM memorije su vrsta memorije koje se veoma \u010desto koriste za projektovanje najrazli\u010ditijih elektronskih ure\u0111aja zbog njihove niske cene i gustine pakovanja.\n\n\u0160ta su SRAM memorije?|SRAM memorije su br\u017ee od DRAM memorija, ali su skuplje. Pogodne su za primene koje ne zahtevaju veliku koli\u010dinu memorije i gde je brzi pristup memoriji imperativan zahtev.\n\n\u0160ta su nepostojane memorije?|Nepostojane memorije su DRAM i SRAM memorije, koje gube svoj sadr\u017eaj kada se isklju\u010di napajanje.\n\n\u0160ta su postojane memorije?|Postojane memorije su ROM i PROM memorije, koje zadr\u017eavaju sadr\u017eaj \u010dak i nakon isklju\u010denja napajanja.\n\nKako se posti\u017ee pro\u0161irenje memorijske re\u010di?|Pro\u0161irenje memorijske re\u010di se posti\u017ee paralelnim vezivanjem nekoliko memorijskih \u010dipova.\n\nKako se realizuju ve\u0107e memorije?|Ve\u0107e memorije se realizuju tako \u0161to se povezuju nekoliko memorijskih \u010dipova na red, tako da svaki \u010dip sadr\u017ei jedan deo od ukupnog broja memorijskih re\u010di.\n\nObja\u0161nji pojam 'adresni dekoder'.|Adresni dekoder dekodira adresu i selektuje jednu od vrsta radi pristupa svakoj memorijskoj \u0107eliji.\n\n\u0160ta se de\u0161ava kada su RWS i CS jednaki 1 u selektovanoj vrsti?|Kada su RWS i CS jednaki 1 u selektovanoj vrsti, u selektovanu vrstu upisuje se novi sadr\u017eaj.\n\n\u0160ta se de\u0161ava kada je RWS=0 i CS=1?|Kada je RWS=0 i CS=1, podatak iz selektovane vrste se prosle\u0111uje na U/I port preko tro-stati\u010dkih bafera.\n\nObja\u0161nji kako se formira memorija sa ve\u0107im m.|Memorija sa ve\u0107im m se formira paralelnim vezivanjem nekoliko memorijskih \u010dipova.\n\nObja\u0161nji kako se realizuje RAM memorija kapaciteta 16Kx32.|RAM memorija kapaciteta 16Kx32 se realizuje pomo\u0107u RAM \u010dipova kapaciteta 16Kx8 putem paralelnog vezivanja nekoliko \u010dipova i podeljivanja adresnih linija, linija CS i RWS, kao i ulazne i izlazne magistrale.", "ovom slu\u010daju svi memorijski \u010dipovi dele istu ulazne i istu izlaznu magistralu, kao i zajedni\u010dki\nupravlja\u010dki signal RWS.\n20\nPoglavlje 4 RAM memorija\nSlika 4.4 64Kx8 RAM realizovan pomo\u0107u 16Kx8 RAM. [Izvor: Autor]\n21\nPoglavlje 5\nStack i queue memorija\nSTACK MEMORIJA\nStek (stack) ili magacin je memorijska struktura koja se \u010desto koristi\nkako u softveru tako i u hardveru.\nStek\nStek (stack) ili magacin je memorijska struktura koja se \u010desto koristi kako u softveru tako\ni u hardveru. Po definiciji, stek je memorija sa ograni\u010denim pristupom. Za razliku od RAM\u2010a\ngde se bilo kom zapam\u0107enom podatku mo\u017ee pristupati u bilo kom vremenu, podacima\nzapam\u0107enim u steku pristupa se isklju\u010divo preko jedne lokacije: vrh steka.\nDrugim re\u010dima, kada se podatak upisuje u stek, ili stavlja na stek (operacije push), on se\nsme\u0161ta na vrh steka i pri tome se svi prethodno upisani podaci spu\u0161taju za jednu poziciju niz\nstek.\nSuprotno tome, kada se podatak \u010dita iz steka ili uzima sa steka (operacija pop), on se sklanja\nsa vrha steka i pri tome se svi ostali podaci podi\u017eu za jednu poziciju navi\u0161e uz stek. Na Sl. 1a\nje prikazan stek dubine 4 (tj. kapaciteta 4 re\u010di) koji inicijalno sadr\u017ei dva broja: 34 na lokaciji\nTop i 23 na lokaciji Top\u20101. Na Sl. 1b mo\u017ee se videti da stavljanje broja 45 na stek zahteva da\nbrojevi 34 i 23 budu preme\u0161teni na lokacije Top\u20101 i Top\u20102.\nS druge strane, kada se broj 45 uzima sa steka, brojevi 34 i 23 se pomeraju navi\u0161e, tako da\nponovo zauzimaju lokacije Top i Top\u20101 (Sl. 1c). U ovom konkretnom primeru, na stek se mo\u017ee\nstaviti najvi\u0161e \u010detiri broja, pre nego \u0161to se stek napuni. Nakon toga, svaki novi upis u stek\nzna\u010di gubitak podatka sa dna steka.\nSlika 5.1 Rad steka: (a) sadr\u017eaj steka pre upisa broja 45; (b) sadr\u017eaj steka nakon upisa broj 45; (c)\nsadr\u017eaj steka nakon \u010ditanja broja 45. [Izvor: Autor]\n22\nPoglavlje 5 Stack i queue memorija\nQUEUE MEMORIJA\nRed \u010dekanja ili queue je struktura koja se \u010desto koristi kada treba\nuravnote\u017eiti zahteve za nekom obradom.\nFIFO\nFIFO ( First\u2010In\u2010First\u2010Out), ili,red \u010dekanja (en. queue), je struktura koja se \u010desto koristi kada\ntreba uravnote\u017eiti zahteve za nekom obradom. Zamislimo, na primer, ljude kako stoje ispred\n\u0161altera u banci ili kako ulaze u autobus, koji moraju \u010dekati u redu dok ne stignu na red da\nbudu opslu\u017eeni.\nSli\u010dna situacija se javlja kod razli\u010ditih procesora, nekih integrisanih kola ili bilo kog ure\u0111aja\nkoji \u0161alje podatke nekom drugom ure\u0111aju radi dalje obrade, u smislu da onda kada u jednom\ntrenutku brzina generisanja podataka nadma\u0161i brzinu kojom se podaci obra\u0111uju, neophodno\nje izme\u0111u proizvo\u0111a\u010da i potro\u0161a\u010da umetnuti red \u010dekanja, tj. FIFO.\nNaravno, u takvim situacijama, brzina kojom proizvo\u0111a\u010d generi\u0161e podatke ne mo\u017ee u\nnedogled biti ve\u0107a od brzine kojom potro\u0161a\u010d mo\u017ee da prihvata podatke, jer bi to zahtevalo\nred \u010dekanja beskona\u010dne du\u017eine.\nSTACK NASPRAM QUEUE MEMORIJE\nStack naspram queue memorije (video obja\u0161njenje)\nOva lekcija sadr\u017ei video materijal. Ukoliko \u017eelite da pogledate ovaj video morate da\notvorite LAMS lekciju.": "Stek \u0161ta predstavlja?|Stek (stack) je memorijska struktura sa ograni\u010denim pristupom, koja se \u010desto koristi u softveru i hardveru. Podacima zapam\u0107enim u steku pristupa se isklju\u010divo preko vrha steka.\n\nKako se podaci upisuju u stek?|Kada se podatak upisuje u stek (operacija push), on se sme\u0161ta na vrh steka, a svi prethodno upisani podaci se spu\u0161taju za jednu poziciju niz stek.\n\nKako se podaci \u010ditaju iz steka?|Kada se podatak \u010dita iz steka (operacija pop), on se sklanja sa vrha steka, a svi ostali podaci se podi\u017eu za jednu poziciju navi\u0161e uz stek.\n\n\u0160ta je FIFO?|FIFO (First-In-First-Out) je struktura koja se \u010desto koristi kada treba uravnote\u017eiti zahteve za nekom obradom. Prvi koji stigne \u010deka prvi biva opslu\u017een.\n\nZa \u0161ta se koristi FIFO?|FIFO se koristi kada proizvo\u0111a\u010d generi\u0161e podatke br\u017ee nego \u0161to potro\u0161a\u010d mo\u017ee da ih obra\u0111uje, da bi se izbeglo preoptere\u0107enje potro\u0161a\u010da.\n\n\u0160ta predstavlja red \u010dekanja ili queue?|Red \u010dekanja ili queue je struktura koja se \u010desto koristi kada treba uravnote\u017eiti zahteve za nekom obradom. Sli\u010dan je FIFO konceptu.\n\nKako se razlikuju stack i queue memorija?|Stack i queue memorija se razlikuju po na\u010dinu upisa i \u010ditanja podataka. U stacku se podaci upisuju i \u010ditaju isklju\u010divo sa vrha (LIFO), dok se u queueu podaci upisuju na kraj, a \u010ditaju se sa po\u010detka (FIFO).", "23\nPoglavlje 6\nPokazne Ve\u017ebe\nKODER\nVe\u017eba iz kodera (10 min)\nKoder(en.coder)jekombinacionimodulsavi\u0161eulaza(m)ivi\u0161eizlaza(n).Onobavljafunkciju\nkodiranja informacija. Kada dovedemo signal na samo jedan ulaz modula, dobijamo izlaznu\ninformaciju u vidu binarnog koda sa (n) cifara.\nm\nKoder koji ima 2 ulaza ima m izlaza.\nSlika 6.1 Koder [Izvor: Autor]\nKoder 8/3\n3\nKoder 8/3 ima 8 (2 ) ulaza i 3 izlaza. Signal se mo\u017ee dovesti samo na jedan od ulaza. Kada\ndovedemo signal do odre\u0111enog ulaza, na izlazu se generi\u0161e binarna kombinacija bitova koja\nodgovara broju ulaza. Npr. ako je signal na ulazu 3, dobijamo 011 na izlazu.\n24\nPoglavlje 6 Pokazne Ve\u017ebe\nSlika 6.2 Koder 8/3 [Izvor: Autor]\nREALIZACIJA KODERA\nRealizacija kodera preko logi\u010dkih elemenata (10 min)\nSlika 6.3 Koder realizovan uz pomo\u0107 ILI logi\u010dkih kola [Izvor: Autor]\n25\nPoglavlje 6 Pokazne Ve\u017ebe\nDEKODER\nVe\u017eba iz Dekodera (8 min)\nDekoder (en. decoder) je kombinacioni modul sa vi\u0161e ulaza (m) i vi\u0161e izlaza (n). On obavlja\nfunkciju dekodiranja binarno kodirane informacije koja je dovedena na ulaz. Na ulazu se\naktivira jedan ulaz koji odgovara ulaznoj kombinaciji brojeva.\nn\nDekoder koji ima n ulaza, ima 2 izlaza.\nSlika 6.4 Dekoder [Izvor: Autor]\nDekoder 3/8\n3\nDekoder 3/8 ima 3 ulaza i 8 (2 ) izlaza. Na ulaz se dovodi binarna kombinacija 3 bita. Kao\nizlaz se aktivira samo jedan izlaz koji odgovara toj binarnoj kombinaciji. Npr. ako je binarna\nkombinacija na ulazu 011, izlaz Y3 \u0107e se aktivirati.\n26\nPoglavlje 6 Pokazne Ve\u017ebe\nSlika 6.5 Dekoder 3/8 [Izvor: Autor]\nREALIZACIJA DEKODERA\nRealizacija dekodera preko logi\u010dkih elemenata (7 min)\nSlika 6.6 Realizacija dekodera uz pomo\u0107 AND i NOT logi\u010dkih kola [Izvor: Autor]\nMULTIPLEKSER I DEMULTIPLEKSER\nZadaci iz Multipleksera i Demultipleksera (10 min)\nMultiplekser (en. multiplexer, MUX) je kombinacioni modul koji ima (n) ulaza, (m) selekcionih\nsignala i jedan izlaz Y. U zavisnosti od binarne kombinacije selekcionog signala, on \u0161alje\nn\nodre\u0111eni ulaz direktno na izlaz Y. Multiplekser za 2 ulaza mora da ima n selekcionih signala,\na uvek ima samo jedan izlaz.\nMultiplekser 8/1\n3\nMultiplekser 8/1 ima 8 (2 ) ulaza i 3 selekciona signala. Kada se na selekcione ulaze C2, C1 i\nC0dovedeodre\u0111enabinarnakombinacija,ulazkojiodgovaratojbinarnojkombinacijidirektno\nse prosle\u0111uje na izlaz.\n27\nPoglavlje 6 Pokazne Ve\u017ebe\nSlika 6.7 Multiplekser [Izvor: Autor]\nDemultiplekser (en. demultiplexer, DMUX) je kombinacioni modul koji ima (n) izlaza, (m)\nselekcionih signala i jedan ulaz Y. U zavisnosti od binarne kombinacije selekcionih signala, on\nn\n\u0161aljeulazYnanekiodizlaza.Demultiplekserza2 izlazamoradaimanselekcionihsignala,a\nuvek ima samo jedan ulaz.\nDemultiplekser 1/8\n3\nDemultiplekser 1/8 ima 8 (2 ) izlaza i 3 selekciona signala kao i jedan ulaz. Kada se na\nkontrolne signala C2, C1 i C0 dovede odre\u0111ena binarna kombinacija signal koji je na ulazu se\n\u0161alje uzlazu koji odgovara binarnoj kombinaciji kontrolnih signala. Npr. ako se dovede na C2,\nC1 i C0 binarna kombinacija 101, ulaz Y \u0107e biti prosle\u0111en na izlaz A5.": "\u0160ta je koder?|Koder je kombinacioni modul sa vi\u0161e ulaza i vi\u0161e izlaza. On obavlja funkciju kodiranja informacija tako \u0161to doveden signal na samo jedan ulaz modula rezultuje u izlaznu informaciju u vidu binarnog koda sa (n) cifara.\n\nKako funkcioni\u0161e koder 8/3?|Koder 8/3 ima 8 (2^3) ulaza i 3 izlaza. Kada se signal dovede na odre\u0111eni ulaz, na izlazu se generi\u0161e binarna kombinacija bitova koja odgovara broju ulaza.\n\n\u0160ta je dekoder?|Dekoder je kombinacioni modul sa vi\u0161e ulaza i vi\u0161e izlaza. On obavlja funkciju dekodiranja binarno kodirane informacije koja je dovedena na ulaz.\n\nKako funkcioni\u0161e dekoder 3/8?|Dekoder 3/8 ima 3 ulaza i 8 (2^3) izlaza. Na ulaz se dovodi binarna kombinacija 3 bita. Kao izlaz se aktivira samo jedan izlaz koji odgovara toj binarnoj kombinaciji.\n\n\u0160ta je multiplekser?|Multiplekser je kombinacioni modul koji ima (n) ulaza, (m) selekcionih signala i jedan izlaz Y. U zavisnosti od binarne kombinacije selekcionog signala, on \u0161alje odre\u0111eni ulaz direktno na izlaz Y.\n\n\u0160ta je demultiplekser?|Demultiplekser je kombinacioni modul koji ima (n) izlaza, (m) selekcionih signala i jedan ulaz Y. U zavisnosti od binarne kombinacije selekcionih signala, on \u0161alje ulaz Y na jedan od izlaza.\n\nKako funkcioni\u0161e multiplekser 8/1?|Multiplekser 8/1 ima 8 (2^3) ulaza i 3 selekciona signala. U zavisnosti od binarne kombinacije selekcionog signala, on \u0161alje odre\u0111eni ulaz direktno na izlaz.\n\nKako funkcioni\u0161e demultiplekser 1/8?|Demultiplekser 1/8 ima 8 (2^3) izlaza i 3 selekciona signala kao i jedan ulaz. U zavisnosti od binarne kombinacije kontrolnih signala, on \u0161alje ulaz Y na jedan od izlaza.", "Slika 6.8 Demultiplekser [Izvor: Autor]\nPOTPUNI SABIRA\u010c I BROJA\u010c\nZadaci iz potpunog sabira\u010da i broja\u010da (10 min)\nPotpuni sabira\u010d ima 3 ulazna signala. Dva ulazna signala (a i b) su brojevi koji se sabiraju, a\ntre\u0107i signal je prenos iz prethodnog sabiranja (Cul) (Carry In).\nPotpunisabira\u010dima2izlaza,jedanjerezultatsabiranja,adrugisignalpredstavljaprenos(Ciz)\n(Carry Out).\n28\nPoglavlje 6 Pokazne Ve\u017ebe\nSlika 6.9 Potpuni jednobitni sabira\u010d [Izvor: Autor]\nBroja\u010di su sekvencijalni moduli koji nailaskom na takt daju binarni izlaz pove\u0107an ili smanjen u\nodnosunapro\u0161lizajedanitouzavisnostidalijebroja\u010dikrementalniilidekrementalni(rastu\u0107i\nili opadaju\u0107i).\nBroj razli\u010ditih cifara koje broja\u010d mo\u017ee da generi\u0161e nazivamo moduo broja\u010da.\nBroja\u010d po modulu M broji od 0 do M-1 nakon \u010dega se resetuje i broji ponovo.\nSlika 6.10 Broja\u010d [Izvor: Autor]\nBROJA\u010c PO MODULU 13\nZadatak: Broja\u010d po modulu 13 (10 min)\n29\nPoglavlje 6 Pokazne Ve\u017ebe\nBroja\u010d po modulu 13 broj od 0 do 12 pa se zatim resetuje. Po\u0161to broja\u010d broji do 13 treba nam\nbroja\u010d sa 4 bita. Broja\u010d po\u010dinje od 0000 (0) a resetuje se na takt posle 1100 (12).\nSlika 6.11 Broja\u010d po modulu 13 [Izvor: Autor]\nPRO\u0160IRENJE MEMORIJSKIH MODULA\nZadatak iz pro\u0161irenja memorijskih modula 1/2 (15 minuta)\nZadatak 1. (15 minuta)\nDat je memorijski modul 16Kx8.\na) Skicirati modul.b) Koriste\u0107i date memorijske module i potrebna kola realizovati memorijski\nmodul 64Kx24\n30\nPoglavlje 6 Pokazne Ve\u017ebe\nSlika 6.12 Memorijski modul 16Kx8. I[Izvor: Autor]\nb) Pro\u0161irenje: od modula 16Kx8, napraviti modul 64Kx24\nMogu\u0107a su slede\u0107a pro\u0161irenja:\n1. pro\u0161irenje magistrale podataka (po horizontali) 2. pro\u0161irenja adresnog prostora (po\nvertikali) 3. oba pro\u0161irenja\nU ovom slu\u010daju imamo oba pro\u0161irenja\ndata pro\u0161irenje: 8bita->24bita trebaju nam po 3 modula po horizontali\nadresno pro\u0161irenje: 16K ->64K: trebaju nam 4 vertikalne grupe\nukupno nam treba 4x3=12 modula\nPrvo radimo pro\u0161irenje po horizontali\nSlika 6.13 Pro\u0161irenje po horizontali [Izvor: Autor]\n31\nPoglavlje 6 Pokazne Ve\u017ebe\nPRO\u0160IRENJE MEMORIJSKIH MODULA - PRO\u0160IRENJE\nPO VERTIKALI\nZadatak iz pro\u0161irenja memorijskih modula, pro\u0161irenje po vertikali\nZatim vr\u0161imo nad tim modulom pro\u0161irenje po vertikali.\nZa pro\u0161irenje od 16K na 64K, trebaju nam \u010detiri vertikalne grupe, ali i obavezan dekoder, i to\ndekoder 2/4 u ovom slu\u010daju. Obratite pa\u017enju, na sve horizontalne grupe se vode ni\u017ei bitovi\nadrese, od A0-A13, vi\u0161i delovi adrese A14-A15 se vode na dekoder koji generi\u0161e \u010detiri CS\nsignala za svaku vertikalnu grupu.\nSlika 6.14 Pro\u0161irenje memorijskog modula po horizontali. [Izvor: Autor]\n32\nPoglavlje 7\nZadaci za samostalni rad\nZADACI ZA SAMOSTALNI RAD IZ KARNOOVIH MAPA\nZadaci za samostalni rad rade se ukupnp 120 minuta\nNa osnovu datih funkcija, uraditi minimalizaciju koriste\u0107i Karnoove mape, i zatim realizovati\nlogi\u010dku funkciju.\nf = P{0,1,2,3,8,13}\nf = P{0,3,4,6,7,8,9,15}\nf = P{1,3,5,7,9,11,13}\nf = P{1,2,3,6,7,8,14,15}\nf = P{1,3,4,7,8,9,10,12}\nf = P{0,2,4,6,13,14,15}\nf = Q{0,1,2,3,4,6,8,10}\nf = Q{0,3,4,6,12,13,14}\nf = Q{1,3,5,7,8,9,10,11}\nf = Q{1,2,3,6,7,10,11}": "\u0160ta su osnovne karakteristike potpunog sabira\u010da?|Potpuni sabira\u010d ima 3 ulazna signala. Dva ulazna signala su brojevi koji se sabiraju, a tre\u0107i signal je prenos iz prethodnog sabiranja. Potpunisabira\u010dima ima 2 izlaza, jedan je rezultat sabiranja, a drugi signal predstavlja prenos.\n\n\u0160ta predstavlja broja\u010d?|Broja\u010di su sekvencijalni moduli koji nailaskom na takt daju binarni izlaz pove\u0107an ili smanjen u odnosu na pro\u0161li izlaz i zavisnost od vrste broja\u010da (krementalni ili dekrementalni).\n\n\u0160ta je moduo broja\u010da?|Broj razli\u010ditih cifara koje broja\u010d mo\u017ee da generi\u0161e nazivamo moduo broja\u010da.\n\nKako broja\u010d po modulu M radi?|Broja\u010d po modulu M broji od 0 do M-1 nakon \u010dega se resetuje i broji ponovo.\n\n\u0160ta je dekoder 2/4?|Dekoder 2/4 je dekoder koji ima 2 ulazna signala i 4 izlazna signala, i slu\u017ei za selekciju jednog od 4 izlaza u zavisnosti od ulaznih signala.\n\nKako da uradim minimalizaciju koriste\u0107i Karnoove mape?|Na osnovu datih funkcija, uradite minimalizaciju koriste\u0107i Karnoove mape tako \u0161to \u0107ete svaku funkciju predstaviti u obliku Karnove mape, onda je spojiti i dobiti minimalnu logi\u010dku funkciju.", "f = Q{1,3,4,7,12,14,15}\nf = Q{0,2,4,6,8,10,12}\nDODATNI MATERIJALI\nDodatni materijali iz 4. lekcije\nKarnoove mape\nOva lekcija sadr\u017ei video materijal. Ukoliko \u017eelite da pogledate ovaj video morate da\notvorite LAMS lekciju.\nSR Latch | NOR and NAND SR Latch\nOva lekcija sadr\u017ei video materijal. Ukoliko \u017eelite da pogledate ovaj video morate da\notvorite LAMS lekciju.\n33\nPoglavlje 8\nDoma\u0107i zadatak\nDOMA\u0106I ZADATAK #4\nDoma\u0107i zadatak #4 okvirno se radi 45 min\nNapomena:\nSvaki student dobija jedinstveni doma\u0107i zadatak jer zavisi od broja indeksa.\n1. Realizovati modul broja\u010da po modulu M. Moduo M ra\u010dunate tako \u0161to poslednju vrednost\nbroja indeksa pomno\u017eite sa 2.\nStudenti kojima se indeksa zavr\u0161ava na 0 ili 1 uzimaju predposlednju vrednost.\nPrimer:\n\u2022 Ako je broj indeksa 4087 onda treba projektovati sinhroni broja\u010d po modulu 14.\n\u2022 Ako je broj indeksa 3960 onda treba projektovati sinhroni broja\u010d po modulu 12.\nPo\u010detno stanje broja\u010da je 0.\nPredaja doma\u0107eg zadatka:\nDoma\u0107i zadatak slati odgovaraju\u0107em predmetnom asistentu, sa predmetnim profesorom u\nCC.\nPredati doma\u0107i zadatak koriste\u0107i .doc/docx uputstvo dato u prvoj lekciji.\n34\nPoglavlje 9\nZaklju\u010dak\nZAKLJU\u010cAK\nRezime lekcije #4\nU ovoj lekciji bilo je re\u010di najpre o sekvencijalnim kolima, \u010diji se trenutni izlaz ra\u010duna ne samo\nu zavisnosti od trenutnih stanja na ulazu, ve\u0107 i od prethodnih izlaza.\nPredstavljena su latch kola i flip-flopovi, i predstavnici istih jesu SR-latch i D-flip-flip.\nOva kola su pogodna za skladi\u0161tenje informacija, pa se koriste za realizaciju memorijskih i\nregistarskih elemenata.\nZatim, bilo je re\u010di o stack i queue memoriji, koje se uveliko koriste u razli\u010ditim realizacijama.\nLiteratura:\nA. Tanenbaum, Structured Computer Organization, Chapter 03, pp. 169 - 184.\n35": "\u0160ta predstavljaju dodatni materijali u 4. lekciji?|Dodatni materijali u 4. lekciji su Karnoove mape i video materijal koji se mo\u017ee pogledati otvaranjem LAMS lekcije.\n\n\u0160ta su SR Latch kola?|SR Latch kola su tip sekvencijalna kola koja mogu skladi\u0161titi jedan bit informacije.\n\nKako se modulo M ra\u010duna za realizaciju modula broja\u010da?|Modulo M se ra\u010duna tako \u0161to se poslednja vrednost broja indeksa pomno\u017ei sa 2.\n\n\u0160ta predstavljaju flip-flopovi?|Flip-flopovi su tip sekvencijalnih kola koja mogu skladi\u0161titi jedan bit informacije i imaju sposobnost prelaska iz jednog stanja u drugo.\n\nKako se predaje doma\u0107i zadatak #4?|Doma\u0107i zadatak #4 se predaje odgovaraju\u0107em predmetnom asistentu sa predmetnim profesorom u CC koriste\u0107i .doc/docx format uputstva dato u prvoj lekciji.\n\n\u0160ta su stack i queue memorija?|Stack i queue memorija su tipovi memorija koji se koriste za skladi\u0161tenje informacija u odre\u0111enom redu i imaju razli\u010dite strategije za dodavanje i skidanje podataka.\n\nKoje je literature preporu\u010dena za ovo poglavlje?|Preporu\u010dena literatura za ovo poglavlje je knjiga A. Tanenbaum, Structured Computer Organization, Chapter 03, pp. 169 - 184."}